-- Copyright (C) 2021-2023 Technology Matters
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Affero General Public License as published
-- by the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Affero General Public License for more details.
--
-- You should have received a copy of the GNU Affero General Public License
-- along with this program.  If not, see https://www.gnu.org/licenses/.


-- This provides an example of how one might migrate contacts and their associated data to a new accountSid.
-- This was originally used to migrate test data generated by e2e accounts to their own test HRM account
-- It takes a few shortcuts that were viable because this was predicatble data gebnerated by automated tests, and not real user data.
-- It meant we could make assumptions like 'no profile will have any sections' and 'no contacts will have any CSAM reports' because the tests didn't create those
-- The 'WHERE' clauses are also hardcoded for the use case

--ROLLBACK;
START TRANSACTION;
ALTER TABLE IF EXISTS public."ContactJobs" DROP CONSTRAINT IF EXISTS "FK_ContactJobs_Contacts";
--Probably unnecessary to drop this since we copy the profiles rather than move them
ALTER TABLE IF EXISTS public."Contacts" DROP CONSTRAINT IF EXISTS "Contacts_profileId_Profiles_id_fk";
--Probably unnecessary to drop this since we copy the identifiers rather than move them
ALTER TABLE IF EXISTS public."Contacts" DROP CONSTRAINT IF EXISTS "Contacts_identifierId_Identifiers_id_fk";
ALTER TABLE IF EXISTS public."Contacts" DROP CONSTRAINT IF EXISTS "Contacts_caseId_accountSid_fkey";
--Probably unnecessary to drop this since we copy the identifiers and profiles rather than move them
ALTER TABLE IF EXISTS public."ProfilesToIdentifiers" DROP CONSTRAINT IF EXISTS "ProfilesToIdentifiers_identifierId_Identifiers_id_fk";
-- If
--ALTER TABLE IF EXISTS public."ProfilesToIdentifiers" DROP CONSTRAINT IF EXISTS "ProfilesToIdentifiers_profileId_Profiles_id_fk";


UPDATE public."ContactJobs" cj SET "accountSid"='ACx-aselo_test' FROM
public."Contacts" c
WHERE cj."contactId" = c."id" and cj."accountSid" = c."accountSid"
AND
c."accountSid"='ACx' AND
c."twilioWorkerId"= 'WKx' AND
c."taskId"!='offline-contact-task-WKx';

-- Turns out E2E test contacts and other contacts were sharing identifiers, so we need to copy instead of move
INSERT INTO public."Identifiers" (
	"id","identifier", "accountSid", "createdAt", "updatedAt", "createdBy", "updatedBy")
	SELECT DISTINCT i."id",i."identifier", 'ACx-aselo_test', i."createdAt", i."updatedAt", i."createdBy", i."updatedBy"
	FROM public."Identifiers" i INNER JOIN
public."Contacts" c
ON c."identifierId" = i."id" and i."accountSid" = c."accountSid"
WHERE
c."accountSid"='ACx' AND
c."twilioWorkerId"= 'WKx' AND
c."taskId"!='offline-contact-task-WKx';

-- Turns out E2E test contacts and other contacts were sharing profiles, so we need to copy instead of move
INSERT INTO public."Profiles" (
	"id", "name", "accountSid", "createdAt", "updatedAt", "createdBy", "updatedBy")
	SELECT DISTINCT p."id", p."name", 'ACx-aselo_test', p."createdAt", p."updatedAt", p."createdBy", p."updatedBy"
	FROM public."Profiles" p INNER JOIN
public."Contacts" c
ON c."identifierId" = p."id" and p."accountSid" = c."accountSid"
WHERE
c."accountSid"='ACx' AND
c."twilioWorkerId"= 'WKx' AND
c."taskId"!='offline-contact-task-WKx';

-- Recreate the linkage between the copied identifiers and profiles
INSERT INTO public."ProfilesToIdentifiers" (
	"accountSid", "identifierId", "profileId", "createdAt", "updatedAt")
	SELECT DISTINCT 'ACx-aselo_test', pi."identifierId", pi."profileId", pi."createdAt", pi."updatedAt"
	FROM public."ProfilesToIdentifiers" pi INNER JOIN
public."Profiles" p
ON pi."profileId" = p."id" and
p."accountSid"= 'ACx-aselo_test'
WHERE
pi."accountSid"='ACx';

UPDATE public."Cases" cas SET "accountSid"='ACx-aselo_test' FROM
public."Contacts" c
WHERE c."caseId" = cas."id" and cas."accountSid" = c."accountSid"
AND
c."accountSid"='ACx' AND
c."twilioWorkerId"= 'WKx' AND
c."taskId"!='offline-contact-task-WKx';

UPDATE public."Contacts" c SET "accountSid"='ACx-aselo_test'
WHERE
c."accountSid"='ACx' AND
c."twilioWorkerId"= 'WKx' AND
c."taskId"!='offline-contact-task-WKx';


--ALTER TABLE IF EXISTS public."ProfilesToIdentifiers"
--    ADD CONSTRAINT "ProfilesToIdentifiers_profileId_Profiles_id_fk" FOREIGN KEY ("accountSid", "profileId")
--    REFERENCES public."Profiles" ("accountSid", id) MATCH SIMPLE
--    ON UPDATE CASCADE
--    ON DELETE CASCADE;
ALTER TABLE IF EXISTS public."ProfilesToIdentifiers"
    ADD CONSTRAINT "ProfilesToIdentifiers_identifierId_Identifiers_id_fk" FOREIGN KEY ("accountSid", "identifierId")
    REFERENCES public."Identifiers" ("accountSid", id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
ALTER TABLE IF EXISTS public."Contacts"
    ADD CONSTRAINT "Contacts_caseId_accountSid_fkey" FOREIGN KEY ("caseId", "accountSid")
    REFERENCES public."Cases" (id, "accountSid") MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT;
ALTER TABLE IF EXISTS public."Contacts"
    ADD CONSTRAINT "Contacts_identifierId_Identifiers_id_fk" FOREIGN KEY ("accountSid", "identifierId")
    REFERENCES public."Identifiers" ("accountSid", id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE NO ACTION;
ALTER TABLE IF EXISTS public."Contacts"
    ADD CONSTRAINT "Contacts_profileId_Profiles_id_fk" FOREIGN KEY ("accountSid", "profileId")
    REFERENCES public."Profiles" ("accountSid", id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE NO ACTION;
ALTER TABLE IF EXISTS public."ContactJobs"
    ADD CONSTRAINT "FK_ContactJobs_Contacts" FOREIGN KEY ("contactId", "accountSid")
    REFERENCES public."Contacts" (id, "accountSid") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
COMMIT;